README.md Summary:
# easy_joby_py


config.py Summary:
class Config:
    UPLOAD_FOLDER = 'uploads'
    DEBUG = True
    SWAGGER = {
        'title': 'My Flask API',


requirements.txt Summary:
flask
flasgger
pdfplumber
python-docx
ollama


app.py Summary:
from flask import Flask
from flasgger import Swagger
from config import Config
from routes.html_routes import html_routes
from routes.api_routes import api_routes


transcrição.txt Summary:
Done in 25.0 minutes 38 seconds! Subtitle is in the outputs folder.

------------------------------------
1-resumo geral



directory_structure.html Summary:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">


index.html Summary:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">


ollama.html Summary:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">


split_results.html Summary:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">


project_documentation.html Summary:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">


split_file.html Summary:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">


api_routes.py Summary:
from flask import Blueprint, request, jsonify
from modules.directory_structure import get_directory_structure
from modules.ollama import get_ollama_response
from modules.file_processor import (
    read_pdf, read_docx, read_txt,


html_routes.py Summary:
from flask import Blueprint, render_template, request
from modules.directory_structure import get_directory_structure
from modules.ollama import get_available_models, get_ollama_response
from modules.file_processor import (
    read_pdf, read_docx, read_txt,


directory_structure.py Summary:
import os

def get_directory_structure(directory_path):
    if not os.path.exists(directory_path):
        return "Directory does not exist."


ollama.py Summary:
import ollama
import json

def get_available_models():
    try:


project_documentation.py Summary:
import os
import re
from modules.file_processor import read_txt, read_pdf, read_docx

def summarize_text(content, filename):


file_processor.py Summary:
import pdfplumber
import docx

def split_file_by_text(file_content, split_text):
    """


styles.css Summary:
/* General Styles */
body {
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
    background-color: #f4f4f9;


split_file.yml Summary:
post:
  tags:
    - File Splitter
  summary: Split a file into sections
  description: "Splits an uploaded file by a specified method: by text, lines, or paragraphs."


ollama.yml Summary:
post:
  tags:
    - Ollama Response
  summary: Generate response using the Ollama model
  description: "Uses a specified AI model to generate a response based on a system and user prompt."


directory_structure.yml Summary:
post:
  tags:
    - Directory Structure
  summary: Retrieve directory structure
  description: "Retrieve the structure of a directory given a path."

